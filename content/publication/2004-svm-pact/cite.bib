@inproceedings{2004-svm-pact,
 abstract = {Stream programming is currently being pushed as a way to expose concurrency and separate communication from computation. Since there are many stream languages and potential stream execution engines, this paper proposes an abstract machine model that captures the essential characteristics of stream architectures, the Stream Virtual Machine (SVM). The goal of the SVM is to improve interoperability, allow developpment of common compilation tools and reason about stream program performance. The SVM contains control processors, slave kernel processors, and slave DMA units. Is is presented along with the compilation process that takes a stream program down to the SVM and finally down to machine binary. To extract the parameters for our SVM model, we use micro-kernels to characterize two graphics processors and a stream engine, Imagine. The results are encouraging; the model estimates the performance of the target machines with high accuracy.},
 address = {USA},
 author = {Labonte, Francois and Mattson, Peter and Thies, William and Buck, Ian and Kozyrakis, Christos and Horowitz, Mark},
 booktitle = {Proceedings of the 13th International Conference on Parallel Architectures and Compilation Techniques (PACT)},
 isbn = {0769522297},
 month = {September},
 numpages = {11},
 pages = {267â€“277},
 publisher = {IEEE Computer Society},
 series = {PACT '04},
 title = {The Stream Virtual Machine},
 year = {2004}
}


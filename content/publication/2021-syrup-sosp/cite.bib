@inproceedings{2021-syrup-sosp,
 abstract = {Suboptimal scheduling decisions in operating systems, networking stacks, and application runtimes are often responsible for poor application performance, including higher latency and lower throughput. These poor decisions stem from a lack of insight into the applications and requests the scheduler is handling and a lack of coherence and coordination between the various layers of the stack, including NICs, kernels, and applications.We propose Syrup, a framework for user-defined scheduling. Syrup enables untrusted application developers to express application-specific scheduling policies across these system layers without being burdened with the low-level system mechanisms that implement them. Application developers write a scheduling policy with Syrup as a set of matching functions between inputs (threads, network packets, network connections) and executors (cores, network sockets, NIC queues) and then deploy it across system layers without modifying their code. Syrup supports multi-tenancy as multiple co-located applications can each safely and securely specify a custom policy. We present several examples of uses of Syrup to define application and workload-specific scheduling policies in a few lines of code, deploy them across the stack, and improve performance up to 8x compared with default policies.},
 address = {New York, NY, USA},
 author = {Kaffes, Kostis and Humphries, Jack Tigar and Mazières, David and Kozyrakis, Christos},
 booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles (SOSP)},
 doi = {10.1145/3477132.3483548},
 isbn = {9781450387095},
 keywords = {kernel, scheduling, programmability},
 location = {Virtual Event, Germany},
 month = {October},
 numpages = {16},
 pages = {605–620},
 publisher = {Association for Computing Machinery},
 series = {SOSP '21},
 title = {Syrup: User-Defined Scheduling Across the Stack},
 year = {2021}
}


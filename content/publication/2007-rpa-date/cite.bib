@inproceedings{2007-rpa-date,
 abstract = {Conventional register file architectures cannot optimally exploit temporal locality in data references due to their limited capacity and static encoding of register addresses in instructions. In conventional embedded architectures, the register file capacity cannot be increased without resorting to longer instruction words. Similarly, loop unrolling is often required to exploit locality in the register file accesses across iterations because naming registers statically is inflexible. Both optimizations lead to significant code size increases, which is undesirable in embedded systems.In this paper, we introduce the Register Pointer Architecture (RPA), which allows registers to be accessed indirectly through register pointers. Indirection allows a larger register file to be used without increasing the length of instruction words. Additional register file capacity allows many loads and stores, such as those introduced by spill code, to be eliminated, which improves performance and reduces energy consumption. Moreover, indirection affords additional flexibility in naming registers, which reduces the need to apply loop unrolling in order to maximize reuse of register allocated variables.},
 address = {San Jose, CA, USA},
 author = {Park, JongSoo and Park, Sung-Boem and Balfour, James D. and Black-Schaffer, David and Kozyrakis, Christos and Dally, William J.},
 booktitle = {Proceedings of the Conference on Design, Automation and Test in Europe (DATE)},
 isbn = {9783981080124},
 location = {Nice, France},
 month = {January},
 numpages = {6},
 pages = {600â€“605},
 publisher = {EDA Consortium},
 series = {DATE '07},
 title = {Register Pointer Architecture for Efficient Embedded Processors},
 year = {2007}
}


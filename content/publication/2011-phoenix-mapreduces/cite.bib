@inproceedings{2011-phoenix-mapreduces,
 abstract = {This paper describes our rewrite of Phoenix, a MapReduce framework for shared-memory CMPs and SMPs. Despite successfully demonstrating the applicability of a MapReduce-style pipeline to shared-memory machines, Phoenix has a number of limitations; its uniform intermediate storage of key-value pairs, inefficient combiner implementation, and poor task overhead amortization fail to efficiently support a wide range of MapReduce applications, encouraging users to manually circumvent the framework. We describe an alternative implementation, Phoenix++, that provides a modular, flexible pipeline that can be easily adapted by the user to the characteristics of a particular workload. Compared to Phoenix, this new approach achieves a 4.7-fold performance improvement and increased scalability, while allowing users to write simple, strict MapReduce code.},
 address = {New York, NY, USA},
 author = {Talbot, Justin and Yoo, Richard M. and Kozyrakis, Christos},
 booktitle = {Proceedings of the 2nd International Workshop on MapReduce and Its Applications (MapReduce)},
 doi = {10.1145/1996092.1996095},
 isbn = {9781450307000},
 keywords = {modularity, performance, shared-memory MapReduce},
 location = {San Jose, California, USA},
 month = {June},
 numpages = {8},
 pages = {9â€“16},
 publisher = {Association for Computing Machinery},
 series = {MapReduce '11},
 title = {Phoenix++: Modular MapReduce for Shared-Memory Systems},
 year = {2011}
}


@inproceedings{2006-tm-isca,
 abstract = {Transactional Memory (TM) simplifies parallel programming by allowing for parallel execution of atomic tasks. Thus far, TM systems have focused on implementing transactional state buffering and conflict resolution. Missing is a robust hardware/software interface, not limited to simplistic instructions defining transaction boundaries. Without rich semantics, current TM systems cannot support basic features of modern programming languages and operating systems such as transparent library calls, conditional synchronization, system calls, I/O, and runtime exceptions. This paper presents a comprehensive instruction set architecture (ISA) for TM systems. Our proposal introduces three key mechanisms: two-phase commit; support for software handlers on commit, violation, and abort; and full support for open- and closed-nested transactions with independent rollback. These mechanisms provide a flexible interface to implement programming language and operating system functionality. We also show that these mechanisms are practical to implement at the ISA and microarchitecture level for various TM systems. Using an execution-driven simulation, we demonstrate both the functionality (e.g., I/O and conditional scheduling within transactions) and performance potential (2.2× improvement for SPECjbb2000) of the proposed mechanisms. Overall, this paper establishes a rich and efficient interface to foster both hardware and software research on transactional memory.},
 address = {USA},
 author = {McDonald, Austen and Chung, JaeWoong and Carlstrom, Brian D. and Minh, Chi Cao and Chafi, Hassan and Kozyrakis, Christos and Olukotun, Kunle},
 booktitle = {Proceedings of the 33rd International Symposium on Computer Architecture (ISCA)},
 doi = {10.1109/ISCA.2006.9},
 isbn = {076952608X},
 month = {June},
 numpages = {13},
 pages = {53–65},
 publisher = {IEEE Computer Society},
 series = {ISCA '06},
 title = {Architectural Semantics for Practical Transactional Memory},
 year = {2006}
}


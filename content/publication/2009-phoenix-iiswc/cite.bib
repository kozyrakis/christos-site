@inproceedings{2009-phoenix-iiswc,
 abstract = {Dynamic runtimes can simplify parallel programming by automatically managing concurrency and locality without further burdening the programmer. Nevertheless, implementing such runtime systems for large-scale, shared-memory systems can be challenging. This work optimizes Phoenix, a MapReduce runtime for shared-memory multi-cores and multiprocessors, on a quad-chip, 32-core, 256-thread UltraSPARC T2+ system with NUMA characteristics. We show how a multi-layered approach that comprises optimizations on the algorithm, implementation, and OS interaction leads to significant speedup improvements with 256 threads (average of 2.5 higher speedup, maximum of 19 ). We also identify the roadblocks that limit the scalability of parallel runtimes on shared-memory systems, which are inherently tied to the OS scalability on large-scale systems.},
 address = {USA},
 author = {Yoo, Richard M. and Romano, Anthony and Kozyrakis, Christos},
 booktitle = {Proceedings of the 2009 IEEE International Symposium on Workload Characterization (IISWC)},
 doi = {10.1109/IISWC.2009.5306783},
 isbn = {9781424451562},
 month = {October},
 numpages = {10},
 pages = {198â€“207},
 publisher = {IEEE Computer Society},
 series = {IISWC '09},
 title = {Phoenix Rebirth: Scalable MapReduce on a Large-Scale Shared-Memory System},
 year = {2009}
}


@inproceedings{2007-tmprog-ppopp,
 abstract = {With single thread performance starting to plateau, HW architects have turned to chip level multiprocessing (CMP) to increase processing power. All major microprocessor companies are aggressively shipping multi-core products in the mainstream computing market. Moore's law will largely be used to increase HW thread-level parallelism through higher core counts in a CMP environment. CMPs bring new challenges into the design of the software system stack.In this tutorial, we talk about the shift to multi-core processors and the programming implications. In particular, we focus on transactional programming. Transactions have emerged as a promising alternative to lock-based synchronization that eliminates many of the problems associated with lock-based synchronization. We discuss the design of both hardware and software transactional memory and quantify the tradeoffs between the different design points. We show how to extend the Java and C languages with transactional constructs, and how to integrate transactions with compiler optimizations and the language runtime (e.g., memory manager and garbage collection).},
 address = {New York, NY, USA},
 author = {Adl-Tabatabai, Ali-Reza and Kozyrakis, Christos and Saha, Bratin},
 booktitle = {Proceedings of the 12th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP)},
 doi = {10.1145/1229428.1229484},
 isbn = {9781595936028},
 keywords = {transactional memory, atomicity, parallel programming, hardware architecture},
 location = {San Jose, California, USA},
 month = {March},
 numpages = {1},
 pages = {272},
 publisher = {Association for Computing Machinery},
 series = {PPoPP '07},
 title = {Transactional Programming in a Multi-Core Environment},
 year = {2007}
}


@inproceedings{2007-mr-hpca,
 abstract = {This paper evaluates the suitability of the MapReduce model for multi-core and multi-processor systems. MapReduce was created by Google for application development on data-centers with thousands of servers. It allows programmers to write functional-style code that is automaticatlly parallelized and scheduled in a distributed system. We describe Phoenix, an implementation of MapReduce for shared-memory systems that includes a programming API and an efficient runtime system. The Phoenix run-time automatically manages thread creation, dynamic task scheduling, data partitioning, and fault tolerance across processor nodes. We study Phoenix with multi-core and symmetric multiprocessor systems and evaluate its performance potential and error recovery features. We also compare MapReduce code to code written in lower-level APIs such as P-threads. Overall, we establish that, given a careful implementation, MapReduce is a promising model for scalable performance on shared-memory systems with simple parallel code.},
 address = {USA},
 author = {Ranger, Colby and Raghuraman, Ramanan and Penmetsa, Arun and Bradski, Gary and Kozyrakis, Christos},
 booktitle = {Proceedings of the IEEE 13th International Symposium on High Performance Computer Architecture (HPCA)},
 doi = {10.1109/HPCA.2007.346181},
 isbn = {1424408040},
 month = {February},
 numpages = {12},
 pages = {13â€“24},
 publisher = {IEEE Computer Society},
 series = {HPCA '07},
 title = {Evaluating MapReduce for Multi-Core and Multiprocessor Systems},
 year = {2007}
}

